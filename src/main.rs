extern crate image;
extern crate num;
extern crate hsl;
extern crate indicatif;
extern crate rayon;
extern crate rug;

use rug::{Complex, Float};
use rayon::slice::ParallelSliceMut;
use rayon::iter::IndexedParallelIterator;
use rayon::iter::ParallelIterator;

use std::env;

const PREC: u32 = 256;

fn mandelbrot_at(c: Complex,iterations: u32) -> Float {
	let four = Float::with_val(PREC, 4);
    let mut z = c.clone();
    for it in 0..iterations {
        if Float::with_val(PREC, z.real() * z.real() + z.imag() * z.imag()) > four {
            return Float::with_val(PREC, it) / Float::with_val(PREC, iterations);
        }
        z = z.square();
        z += c.clone();
    }

    Float::with_val(PREC, 1)
}

fn mandelbrot_at_pixel(x: u32, y: u32, img_width: u32, img_height: u32,it: u32,zoom:f64) -> image::Rgb<u8> {
	//let center = (Float::with_val(PREC, -0.63413421522307309166332840960), Float::with_val(PREC, 0.68661141963581069380394003021));
	//from internet good zoom video post:
	//let center = (Float::with_val(PREC, -0.636754346582389978643739831915714049947203602138502943775952881544020962497567513223798252010308408295910657852387307099332473299292528455888339008633931), Float::with_val(PREC, 0.6850312970836773014760878391417437674213101098877750750709049508452703456748513481474670919233270255572250498466156541527052675399410021387619438537222657615));
	// from better video :
	let center = (Float::with_val(PREC,Float::parse("-1.7693831791955150182138472860854737829057472636547514374655282165278881912647564588361634463895296673044858257818203031574874912384217194031282461951137475212550848062085787454772803303225167998662391124184542743017129214423639793169296754394181656831301342622793541423768572435783910849972056869527305207508191441734781061794290699753174911133714351734166117456520272756159178932042908932465102671790878414664628213755990650460738372283470777870306458882898202604001744348908388844962887074505853707095832039410323454920540534378406083202543002080240776000604510883136400112955848408048692373051275999457470473671317598770623174665886582323619043055508383245744667325990917947929662025877792679499645660786033978548337553694613673529685268652251959453874971983533677423356377699336623705491817104771909424891461757868378026419765129606526769522898056684520572284028039883286225342392455089357242793475261134567912757009627599451744942893765395578578179137375672787942139328379364197492987307203001409779081030965660422490200242892023288520510396495370720268688377880981691988243756770625044756604957687314689241825216171368155083773536285069411856763404065046728379696513318216144607821920824027797857625921782413101273331959639628043420017995090636222818019324038366814798438238540927811909247543259203596399903790614916969910733455656494065224399357601105072841234072044886928478250600986666987837467585182504661923879353345164721140166670708133939341595205900643816399988710049682525423837465035288755437535332464750001934325685009025423642056347757530380946799290663403877442547063918905505118152350633031870270153292586262005851702999524577716844595335385805548908126325397736860678083754587744508953038826602270140731059161305854135393230132058326419325267890909463907657787245924319849651660028931472549400310808097453589135197164989941931054546261747594558823583006437970585216728326439804654662779987947232731036794099604937358361568561860539962449610052967074013449293876425609214167615079422980743121960127425155223407999875999884").unwrap()), Float::with_val(PREC,Float::parse("0.00423684791873677221492650717136799707668267091740375727945943565011234400080554515730243099502363650631353268335965257182300494805538736306127524814939292355930892834392050796724887904921986666045576626946900666103494014904714323725586979789908520656683202658064024115300378826789786394641622035341055102900456305723718684527210377325846307917512628774672005693326232806953822796755832517188873479124361430989485495501124096329421682827330693532171505367455526637382706988583456915684673202462211937384523487065290004627037270912806345336469007546411109669407622004367957958476890043040953462048335322273359167297049252960438077167010004209439515213189081508634843224000870136889065895088138204552309352430462782158649681507477960551795646930149740918234645225076516652086716320503880420325704104486903747569874284714830068830518642293591138468762031036739665945023607640585036218668993884533558262144356760232561099772965480869237201581493393664645179292489229735815054564819560512372223360478737722905493126886183195223860999679112529868068569066269441982065315045621648665342365985555395338571505660132833205426100878993922388367450899066133115360740011553934369094891871075717765803345451791394082587084902236263067329239601457074910340800624575627557843183429032397590197231701822237810014080715216554518295907984283453243435079846068568753674073705720148851912173075170531293303461334037951893251390031841730968751744420455098473808572196768667200405919237414872570568499964117282073597147065847005207507464373602310697663458722994227826891841411512573589860255142210602837087031792012000966856067648730369466249241454455795058209627003734747970517231654418272974375968391462696901395430614200747446035851467531667672250261488790789606038203516466311672579186528473826173569678887596534006782882871835938615860588356076208162301201143845805878804278970005959539875585918686455482194364808816650829446335905975254727342258614604501418057192598810476108766922935775177687770187001388743012888530139038318783958771247007926690").unwrap()));
	// short:
	//let center = (Float::with_val(PREC, -1.769383179195515018213847286085473782905747263654751437465528216527888191264756458836163446389529667304485825781820303157487),Float::with_val(PREC,0.004236847918736772214926507171367997076682670917403757279459435650112344000805545157302430995023636506313532));
	// Misiurewicz M_2,1
	//let center = (Float::with_val(PREC, -2), Float::with_val(PREC, 0));

    let mandel_width = 3.5 * zoom;
    let mandel_height = 2.0 * zoom;

    let x = center.0 +(x as f64) / (img_width as f64)  *  mandel_width - 0.5 * mandel_width  ;
    let y = center.1 +(y as f64) / (img_height as f64) *  mandel_height - 0.5 * mandel_height  ;

    let alpha = mandelbrot_at(Complex::with_val(PREC, (x, y)), it).to_f64();
    use hsl::HSL;
    let heat = HSL {h: ((1.0 - alpha) * 0.9 * 240.0),s: 1.0,l: 0.5}.to_rgb();
  	image::Rgb {
  		data: [
  			heat.0,heat.1,heat.2
  		]
  	}
}

fn mandelbrot(width: u32, height: u32,it: u32,zoom: f64) -> image::RgbImage {
	let image_size = width as usize*height as usize;
	let mut vec = vec![0u8; image_size*3];
	vec.par_chunks_mut(3).enumerate().for_each(|(pos, slice)| {
		let x = pos % width as usize;
		let y = pos / width as usize;
		let pixel = mandelbrot_at_pixel(x as u32, y as u32, width, height, it,zoom);
		slice[0] = pixel[0];
		slice[1] = pixel[1];
		slice[2] = pixel[2];		
	});
	image::RgbImage::from_vec(width,height,vec).unwrap()
}

fn main() {
    let args: Vec<_> = env::args().skip(1).collect();
    if args.len() != 7 {
        panic!("Must have exactly 7 arguments: width, height, destination (file),iterationsmax , frames,size,rank");
    }

    let width: u32 = args[0]
        .parse()
        .unwrap_or_else(|e| panic!("Width must be an integer, was `{}`: {}", args[0], e));
    let height: u32 = args[1]
        .parse()
        .unwrap_or_else(|e| panic!("Height must be an integer, was `{}`: {}", args[1], e));
    let dest = &args[2];
    let it: u32 = args[3].parse().unwrap();
    let mut it_new : f64 = it.clone().into();
    let frames = args[4].parse().unwrap();
    let size: u32 = args[5].parse().unwrap();
    let rank: u32 = args[6].parse().unwrap();
    println!("Generating mandelbrot of size {} by {}.", width, height);
    //let bar = indicatif::ProgressBar::new(frames);
    println!("Writing mandelbrot to {}...", dest);
    let mut zoom = 2.0 ;
    for num in 0..frames {
        zoom = zoom / (1.0 + 1.0 / 12.0);
        if num%size == rank{
            let filename = format!("{}_{}x{}@{}_{:05}.png", dest,width, height, it, num);
            let mandelbrot = mandelbrot(width, height,it_new as u32,zoom);
            mandelbrot.save(filename).expect("Unable to write file");
            println!("finshed frame {} of {} with {} itarations || rank:{} of size:{} ",num,frames,it_new,rank,size);
            it_new = (it_new as f64* 1.0).round();
        //bar.inc(1); 
        }
    //bar.finish_with_message(&"Done Mandel Broting ...");
	}
}